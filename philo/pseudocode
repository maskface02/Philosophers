# === Data Structures ===
struct SharedData:
    forks: array of mutexes
    write_mutex: mutex for logging
    dead_flag: atomic boolean
    start_time: timestamp
    must_eat: optional meal limit

struct Philosopher:
    id: int
    left_fork: mutex
    right_fork: mutex
    last_meal: timestamp
    eat_count: int
    local_mutex: mutex for thread-safe meal updates

# === Main Program ===
procedure main(args):
    validate_arguments()
    initialize_shared_data()
    create_forks_mutexes()
    create_philosopher_threads()
    create_monitor_thread()
    wait_for_threads()
    cleanup_resources()

# === Philosopher Thread ===
procedure philosopher_routine(phil):
    while not dead_flag:
        think()
        
        lock(helper_mutex)  # Prevent deadlock
        take_left_fork()
        take_right_fork()
        unlock(helper_mutex)
        
        eat_and_update_meal_time()
        release_forks()
        sleep()

# === Monitor Thread ===
procedure monitor_routine():
    while true:
        for each philosopher:
            if time_since_last_meal > time_to_die:
                print_death()
                set_dead_flag()
                exit
            
            if must_eat_defined and all_ate_enough:
                exit
        
        sleep(1ms)  # Precision for 10ms death check

# === Key Operations ===
procedure take_left_fork():
    lock(phil.left_fork)
    log("took left fork")

procedure take_right_fork():
    lock(phil.right_fork)
    log("took right fork")

procedure eat_and_update_meal_time():
    lock(phil.local_mutex)
    phil.last_meal = current_time()
    phil.eat_count += 1
    unlock(phil.local_mutex)
    log("is eating")
    sleep(time_to_eat)
